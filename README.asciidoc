RTorCtl
=======

WARNING: RTorCtl is not ready for *any* form of use besides development at this
point.

RTorCtl presents a Rubyonic interface to Tor's control port.

Prior to Instantiation
----------------------

By default, RTorCtl will use environment variables to determine your
controller's password. If you're using a password, just set `$TORCTL_PASSWD` to
whatever your password is; if your're using a cookie file, set
`$TORCTL_PASSWD_FILE` to the location of this file.

TIP: Be careful to make sure that the cookie file is readable by the current
user!

Also, the command line options `-passwd=<passwd>` and
`-passwd_file=<passwd_file>` have the same effects as their corresponding
environment variables.

Instantiation
-------------

--------------------------
require 'rtorctl'

tor = RTorCtl::RTorCtl.new
--------------------------

Searching for Relays
--------------------

Populating the list of relays is a somewhat expensive process; because of this,
`tor.relays` is cached, so only the first access should block significantly.

----------------------------------------------------------
# Find all the stable relays that exit to port 6697.
tor.relays.find_all{ |relay|
	[:Running, :Stable].all?{|x| relay.flags.include? x} and
	relay.condensed_exit_policy.accepts?("0.0.0.0", 6697)
}

# How many relays are there?
tor.relays.count
# How many of them are exits?
tor.relays.count{ |r| r.flags.include? :Exit }

# Find all the relays in 12.0.0.0/8.
tor.relays.find_all{ |r| r.ip/8 === "12.0.0.0" }
# How many /8 netblocks does Tor have relays in?
tor.relays.map{ |r| (r.ip/8)[0] }.uniq.count
----------------------------------------------------------

CAUTION: At the moment, searching for attributes not in RelayInitializer is
*very* time consuming.

Sending Signals
---------------

---------------------------------------------
# Make Tor put new streams on clean circuits.
tor.signal(:NEWNYM)
---------------------------------------------

Getting Other Information
-------------------------

RTorCtl still has a lot of missing functionality. To get an unpolished interface
to a lot of the data that Tor provides, you can use `getinfo()`. `getinfo()`
returns either a String consisting of the one line response or an Array
consisting of Strings (one for each line of the response).

--------------------------------------------------------
tor.getinfo("config-file") # "/usr/local/etc/tor/torrc"

tor.getinfo("address-mappings/all")
# ['www.gravatar.com 72.233.69.5 "2010-04-20 04:20:00"',
#  'github.com 207.97.227.239 "2010-04-20 04:20:00"']
--------------------------------------------------------
